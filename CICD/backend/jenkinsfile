pipeline { 
    agent any

    environment {
        SONAR_URL = "http://13.127.199.137:9000"
        DOCKER_REPO = "anuj210/dock-repo:latest"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git(
                    credentialsId: 'github-user',
                    url: 'https://github.com/ANUJ-POHANKAR/book-page-1.git'
                )
            }
        }

  stage('Dependency Vulnerability Scan-OWASP') {
    steps {
        sh '''
            curl -L -o dependency-check.tar.gz https://github.com/jeremylong/DependencyCheck/releases/latest/download/dependency-check-9.0.10-release.tar.gz
            tar -xvzf dependency-check.tar.gz
            
            cd spring-backend
            ../dependency-check/bin/dependency-check.sh --project "Spring Backend" --scan . --format HTML --out ../dependency-report.html
        '''
        archiveArtifacts artifacts: 'dependency-report.html', fingerprint: true
    }
}
        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd spring-backend && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage('Docker Build') {
            steps {
                sh '''
                    sudo yum update -y && sudo yum install docker -y
                    sudo systemctl start docker
                    sudo systemctl enable docker
                    sudo docker build -t demo .
                    sudo docker tag demo ${DOCKER_REPO}
                '''
            }
        }

        stage('Trivy Vulnerability Scan') {
            steps {
                sh '''
                    docker pull aquasec/trivy:latest
                    docker images | grep "${DOCKER_REPO}"  
                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format json -o trivy-report.json ${DOCKER_REPO} || true
                '''
                archiveArtifacts artifacts: 'trivy-report.json', fingerprint: true
            }
        }

        stage('Docker Push') {
            steps {
                withCredentials([string(credentialsId: 'docker-hub-password', variable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo $DOCKER_PASSWORD | sudo docker login -u "anuj210" --password-stdin
                        sudo docker push ${DOCKER_REPO}
                        sudo docker system prune -a -f
                    '''
                }
            }
        }

        stage('Manifest Checkout') {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'github-user', gitToolName: 'Default')]) {
                    script {
                        sh '''
                            if [ -d "kubenetes-cd" ]; then
                                rm -rf kubenetes-cd
                            fi
                            git clone https://github.com/ANUJ-POHANKAR/kubenetes-cd.git
                            cd kubenetes-cd
                            git checkout main
                            ls -al
                            
                            # Update Docker Hub image reference in back.yaml
                            sed -i "s#image: anuj210/dock-repo:[^[:space:]]*#image: ${DOCKER_REPO}#" dev/back.yaml

                            git add .
                            git commit -m "Update image tag to latest"
                            git pull origin main
                            git push origin main
                        '''
                    }
                }
            }
        }
    }
}
